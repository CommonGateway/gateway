openapi: 3.0.3
info:
    title: 'Commonground Gateway EAV endpoints'
    description: 'This documentation contains the EAV endpoints on your commonground gateway.'
    termsOfService: 'http://example.com/terms/'
    contact: { name: 'Gateway Support', url: 'http://www.conduction.nl/contact', email: info@conduction.nl }
    license: { name: 'Apache 2.0', url: 'https://www.apache.org/licenses/LICENSE-2.0.html' }
    version: 1.0.1
servers:
    - { url: /, description: 'Gateway server' }
tags:
    - { name: Students, description: apikey }
    - { name: Persons, description: apikey }
    - { name: Organizations, description: apikey }
    - { name: Users, description: apikey }
    - { name: Usergroups, description: apikey }
    - { name: Employees, description: apikey }
    - { name: Reports, description: 'Administratice reports about this environment' }
components:
    schemas: { MessageModel: { type: object, properties: { message: { type: string, format: string, decription: 'The message' }, type: { type: string, format: string, decription: 'the type of error', default: error }, data: { type: array, format: string, decription: 'the data concerning this message' } } }, ListModel: { type: object, properties: { results: { type: array, decription: 'The results of your query' }, total: { type: integer, decription: 'The total amount of items that match your current query' }, pages: { type: integer, decription: 'the amount of pages in the dataset based on your current limit' }, page: { type: integer, decription: 'the curent page of your dataset' }, limit: { type: integer, decription: 'the desired items per resultset or page', default: 25 }, start: { type: integer, decription: 'thsetarting position (or offset) of your dataset', default: 1 } } }, Education: { type: object, required: [level, type], properties: { description: { type: string, title: description, description: '(EAV Object) ', maxLength: 255 }, level: { type: string, title: level, description: '(EAV Object) ', required: true, enum: [HBO, WO] }, institution: { type: string, title: institution, description: '(EAV Object) ', maxLength: 255 }, startDate: { type: datetime, title: startDate, description: '(EAV Object) ' }, degreeGranted: { type: boolean, title: degreeGranted, description: '(EAV Object) Whether or not a degree or diploma has been granted from this eduction or cource to the student' }, teacher_type: { type: string, title: teacher_type, description: '(EAV Object) ', enum: [PROFESSIONAL, VOLUNTEER, BOTH] }, name: { type: string, title: name, description: '(EAV Object) ', maxLength: 255 }, type: { type: string, title: type, description: '(EAV Object) ', required: true, enum: [EDUCATION, COURSE] }, group: { type: string, title: group, description: '(EAV Object) ', enum: [INDIVIDUALLY, GROUP] }, hours: { type: integer, title: hours, description: '(EAV Object) The total amount of hours this education or cource takes' }, degree: { type: boolean, title: degree, description: '(EAV Object) Whether tis eduction or cource grants a degree or diploma' }, endDate: { type: datetime, title: endDate, description: '(EAV Object) ' } } }, Students: { type: object, required: {  }, properties: { intake: { $ref: '#/components/schemas/Student_intake' }, person: { $ref: '#/components/schemas/Persons' }, civicIntegration: { $ref: '#/components/schemas/Civic_integration' }, languageHouse: { $ref: '#/components/schemas/Organizations' }, educations: { $ref: '#/components/schemas/Education' }, learningNeeds: { $ref: '#/components/schemas/Learningneed' }, participations: { $ref: '#/components/schemas/Participation' } } }, Telephone: { type: object, required: [telephone], properties: { telephone: { type: string, title: telephone, description: '(EAV Object) ', maxLength: 255, required: true }, name: { type: string, title: name, description: '(EAV Object) ', maxLength: 255 } } }, Cource: { type: object, required: {  }, properties: { organization: { $ref: '#/components/schemas/Organizations' }, name: { type: string, title: name, description: '(EAV Object) ', maxLength: 255 }, description: { type: string, title: description, description: '(EAV Object) ', maxLength: 255 } } }, Email: { type: object, required: [email], properties: { email: { type: string, title: email, description: '(EAV Object) ', maxLength: 255, required: true }, name: { type: string, title: name, description: '(EAV Object) ', maxLength: 255 } } }, Persons: { type: object, required: [givenName], properties: { parents: { $ref: '#/components/schemas/Persons' }, availability: { type: string, title: availability, description: '(EAV Object) ', enum: [MONDAY_MORNING, MONDAY_AFTERNOON, MONDAY_EVENING, TUESDAY_MORNING, TUESDAY_AFTERNOON, TUESDAY_EVENING, WEDNESDAY_MORNING, WEDNESDAY_AFTERNOON, WEDNESDAY_EVENING, THURSDAY_MORNING, THURSDAY_AFTERNOON, THURSDAY_EVENING, FRIDAY_MORNING, FRIDAY_AFTERNOON, FRIDAY_EVENING, SATURDAY_MORNING, SATURDAY_AFTERNOON, SATURDAY_EVENING, SUNDAY_MORNING, SUNDAY_AFTERNOON, SUNDAY_EVENING] }, telephones: { $ref: '#/components/schemas/Telephone' }, primaryLanguage: { type: string, title: primaryLanguage, description: '(EAV Object) ', maxLength: 255 }, user: { $ref: '#/components/schemas/Users' }, gender: { type: string, title: gender, description: '(EAV Object) ', enum: [MALE, FEMALE, X] }, familyName: { type: string, title: familyName, description: '(EAV Object) ', maxLength: 255 }, speakingLanguages: { type: string, title: speakingLanguages, description: '(EAV Object) ', maxLength: 255 }, employee: { $ref: '#/components/schemas/Users' }, availabilityNotes: { type: string, title: availabilityNotes, description: '(EAV Object) ', maxLength: 255 }, country: { type: string, title: country, description: '(EAV Object) ', maxLength: 255 }, givenName: { type: string, title: givenName, description: '(EAV Object) ', maxLength: 255, required: true }, partners: { $ref: '#/components/schemas/Persons' }, additionalName: { type: string, title: additionalName, description: '(EAV Object) ', maxLength: 255 }, addresses: { $ref: '#/components/schemas/Address' }, birthday: { type: date, title: birthday, description: '(EAV Object) ' }, birthplace: { $ref: '#/components/schemas/Address' }, contactPreferenceOther: { type: string, title: contactPreferenceOther, description: '(EAV Object) (this property is required if the contactPreference property equals OTHER )' }, student: { $ref: '#/components/schemas/Users' }, maritalStatus: { type: string, title: maritalStatus, description: '(EAV Object) ', enum: [MARRIED_PARTNER, SINGLE, DIVORCED, WIDOW] }, children: { $ref: '#/components/schemas/Persons' }, contactPreference: { type: string, title: contactPreference, description: '(EAV Object) ', enum: [PHONECALL, WHATSAPP, EMAIL, OTHER] }, emails: { $ref: '#/components/schemas/Email' } } }, Organizations: { type: object, required: [type], properties: { name: { type: string, title: name, description: '(EAV Object) ', maxLength: 255, mustBeUnique: true }, emails: { $ref: '#/components/schemas/Email' }, telephones: { $ref: '#/components/schemas/Telephone' }, type: { type: string, title: type, description: '(EAV Object) ', required: true, enum: [taalhuis, bisc, verwijder] }, addresses: { $ref: '#/components/schemas/Address' } } }, Learningresult: { type: object, required: {  }, properties: { learningNeed: { $ref: '#/components/schemas/Learningneed' } } }, Student_intake: { type: object, required: [didSignPermissionForm, hasPermissionToShareDataWithProviders, hasPermissionToSendInformationAboutLibraries, hasPermissionToShareDataWithLibraries], properties: { whyWantThisNow: { type: string, title: whyWantThisNow, description: '(EAV Object) ', maxLength: 255 }, whyWantTheseskills: { type: string, title: whyWantTheseskills, description: '(EAV Object) ', maxLength: 255 }, dayTimeActivities: { type: string, title: dayTimeActivities, description: '(EAV Object) ', enum: [SEARCHING_FOR_JOB, RE_INTEGRATION, SCHOOL, VOLUNTEER_JOB, JOB, OTHER] }, wentToLanguageHouseBefore: { type: boolean, title: wentToLanguageHouseBefore, description: '(EAV Object) ' }, status: { type: string, title: status, description: '(EAV Object) ', enum: [REFERRED, ACTIVE, COMPLETED], defaultValue: REFERRED }, readingTestResult: { type: string, title: readingTestResult, description: '(EAV Object) ', enum: [CAN_NOT_READ, A0, A1, A2, B1, B2, C1, C2] }, foundViaOther: { type: string, title: foundViaOther, description: '(EAV Object) ', maxLength: 255 }, writingTestResult: { type: string, title: writingTestResult, description: '(EAV Object) ', enum: [CAN_NOT_WRITE, WRITE_NAW_DETAILS, WRITE_SIMPLE_TEXTS, WRITE_SIMPLE_LETTERS] }, desiredLearningMethod: { type: string, title: desiredLearningMethod, description: '(EAV Object) ', enum: [IN_A_GROUP, ONE_ON_ONE, HOME_ENVIRONMENT, IN_LIBRARY_OR_OTHER, ONLINE] }, didSignPermissionForm: { type: boolean, title: didSignPermissionForm, description: '(EAV Object) ', required: true }, wentToLanguageHouseBeforeReason: { type: string, title: wentToLanguageHouseBeforeReason, description: '(EAV Object) (this property is required if the wentToLanguageHouseBefore property equals 1 )', maxLength: 255 }, desiredSkillsOther: { type: string, title: desiredSkillsOther, description: '(EAV Object) (this property is required if the desiredSkills property equals OTHER )', maxLength: 255 }, hasPermissionToShareDataWithProviders: { type: boolean, title: hasPermissionToShareDataWithProviders, description: '(EAV Object) ', required: true }, knowsLatinAlphabet: { type: boolean, title: knowsLatinAlphabet, description: '(EAV Object) ' }, hasPermissionToSendInformationAboutLibraries: { type: boolean, title: hasPermissionToSendInformationAboutLibraries, description: '(EAV Object) ', required: true }, remarks: { type: string, title: remarks, description: '(EAV Object) ', maxLength: 255 }, lastJob: { type: string, title: lastJob, description: '(EAV Object) ', maxLength: 255 }, inNetherlandsSinceYear: { type: integer, title: inNetherlandsSinceYear, description: '(EAV Object) ' }, hasTriedThisBefore: { type: boolean, title: hasTriedThisBefore, description: '(EAV Object) ' }, hasPermissionToShareDataWithLibraries: { type: boolean, title: hasPermissionToShareDataWithLibraries, description: '(EAV Object) ', required: true }, trainedForJob: { type: string, title: trainedForJob, description: '(EAV Object) ', maxLength: 255 }, dutchNTLevel: { type: string, title: dutchNTLevel, description: '(EAV Object) ', enum: [NT1, NT2] }, date: { type: datetime, title: date, description: '(EAV Object) ' }, dayTimeActivitiesOther: { type: string, title: dayTimeActivitiesOther, description: '(EAV Object) (this property is required if the dayTimeActivities property equals OTHER )', maxLength: 255 }, participationLadder: { type: string, title: participationLadder, description: '(EAV Object) ', enum: ['1 geïsoleerd', '2 sociale contacten buiten huis', '3 deelname georganiseerde activiteiten', '4 vrijwilligers werk/maatschappelijke activering', '5 betaald werk met ondersteuning', '6 betaald werk'] }, lastKnownLevel: { type: string, title: lastKnownLevel, description: '(EAV Object) ', enum: [A0, A1, A2, B1, B2, C1, C2, UNKNOWN] }, foundVia: { type: string, title: foundVia, description: '(EAV Object) (this property is required if the referringOrganizationOther property equals OTHER )', enum: [VOLUNTEER_CENTER, LIBRARY_WEBSITE, SOCIAL_MEDIA, NEWSPAPER, VIA_VIA, OTHER] }, desiredSkills: { type: string, title: desiredSkills, description: '(EAV Object) ', enum: [KLIKTIK, USING_WHATSAPP, USING_SKYPE, DEVICE_FUNCTIONALITIES, DIGITAL_GOVERNMENT, RESERVE_BOOKS_IN_LIBRARY, ADS_ON_MARKTPLAATS, READ_FOR_CHILDREN, UNDERSTAND_PRESCRIPTIONS, WRITE_APPLICATION_LETTER, WRITE_POSTCARD_FOR_FAMILY, DO_ADMINISTRATION, CALCULATIONS_FOR_RECIPES, OTHER] }, hasTriedThisBeforeExplanation: { type: string, title: hasTriedThisBeforeExplanation, description: '(EAV Object) ', maxLength: 255 }, network: { type: string, title: network, description: '(EAV Object) ', enum: [HOUSEHOLD_MEMBERS, NEIGHBORS, FAMILY_MEMBERS, AID_WORKERS, FRIENDS_ACQUAINTANCES, PEOPLE_AT_MOSQUE_CHURCH, ACQUAINTANCES_SPEAKING_OWN_LANGUAGE, ACQUAINTANCES_SPEAKING_DUTCH] }, languageInDailyLife: { type: string, title: languageInDailyLife, description: '(EAV Object) ', maxLength: 255 }, referringOrganizationOther: { type: string, title: referringOrganizationOther, description: '(EAV Object) (this property is required if the referrerDetails_referringOrganization property equals OTHER )', maxLength: 255 }, referringOrganization: { type: string, title: referringOrganization, description: '(EAV Object) ', enum: [UWV, SOCIAL_SERVICE, LIBRARY, WELFARE_WORK, NEIGHBORHOOD_TEAM, VOLUNTEER_ORGANIZATION, LANGUAGE_PROVIDER, OTHER] }, wentToLanguageHouseBeforeYear: { type: integer, title: wentToLanguageHouseBeforeYear, description: '(EAV Object) ', maxLength: 255 }, speakingLevel: { type: string, title: speakingLevel, description: '(EAV Object) ', enum: [BEGINNER, REASONABLE, ADVANCED] } } }, Users: { type: object, required: [userGroups, username, locale, person, organization], properties: { userGroups: { $ref: '#/components/schemas/Usergroups' }, username: { type: string, title: username, description: '(EAV Object) ', maxLength: 255, required: true, mustBeUnique: true }, locale: { type: string, title: locale, description: '(EAV Object) ', maxLength: 255, required: true, defaultValue: nl-NL }, person: { $ref: '#/components/schemas/Persons' }, organization: { $ref: '#/components/schemas/Organizations' } } }, Usergroups: { type: object, required: [description, organization, name], properties: { description: { type: string, title: description, description: '(EAV Object) ', maxLength: 2550, required: true }, organization: { $ref: '#/components/schemas/Organizations' }, name: { type: string, title: name, description: '(EAV Object) ', maxLength: 255, required: true } } }, Participation: { type: object, required: {  }, properties: { cource: { $ref: '#/components/schemas/Cource' }, student: { $ref: '#/components/schemas/Students' } } }, Employee_intake: { type: object, required: {  }, properties: { gotHereVia: { type: string, title: gotHereVia, description: '(EAV Object) ', maxLength: 255 }, hasExperienceWithTargetGroup: { type: boolean, title: hasExperienceWithTargetGroup, description: '(EAV Object) ' }, volunteeringPreference: { type: string, title: volunteeringPreference, description: '(EAV Object) ', maxLength: 255 }, targetGroupPreferences: { type: string, title: targetGroupPreferences, description: '(EAV Object) ', enum: [NT1, NT2] }, currentEducation: { type: string, title: currentEducation, description: '(EAV Object) ', enum: ['YES', 'NO', NO_BUT_DID_EARLIER] }, doesCurrentlyFollowCourse: { type: boolean, title: doesCurrentlyFollowCourse, description: '(EAV Object) ' }, otherRelevantCertificates: { type: string, title: otherRelevantCertificates, description: '(EAV Object) ', maxLength: 255 }, experienceWithTargetGroupYesReason: { type: string, title: experienceWithTargetGroupYesReason, description: '(EAV Object) ' }, isVOGChecked: { type: boolean, title: isVOGChecked, description: '(EAV Object) ' } } }, Learningneed: { type: object, required: {  }, properties: { student: { $ref: '#/components/schemas/Students' }, learningResult: { $ref: '#/components/schemas/Learningresult' } } }, Civic_integration: { type: object, required: {  }, properties: { requirement: { type: datetime, title: requirement, description: '(EAV Object) (this property is required if the requirement property equals CURRENTLY_WORKING_ON_INTEGRATION )' }, reason: { type: string, title: reason, description: '(EAV Object) (this property is required if the requirement property equals NO )', enum: [FINISHED, FROM_EU_COUNTRY, EXEMPTED_OR_ZROUTE] } } }, Address: { type: object, required: {  }, properties: { houseNumber: { type: string, title: houseNumber, description: '(EAV Object) ', maxLength: 255 }, houseNumberSuffix: { type: string, title: houseNumberSuffix, description: '(EAV Object) ', maxLength: 255 }, postalCode: { type: string, title: postalCode, description: '(EAV Object) ', maxLength: 255 }, locality: { type: string, title: locality, description: '(EAV Object) ', maxLength: 255 }, country: { type: string, title: country, description: '(EAV Object) ', maxLength: 255 }, name: { type: string, title: name, description: '(EAV Object) ', maxLength: 255 }, street: { type: string, title: street, description: '(EAV Object) ', maxLength: 255 } } }, Employees: { type: object, required: {  }, properties: { languageHouse: { $ref: '#/components/schemas/Organizations' }, person: { $ref: '#/components/schemas/Persons' }, educations: { $ref: '#/components/schemas/Education' }, intake: { $ref: '#/components/schemas/Employee_intake' } } } }
    responces: { ErrorResponce: { description: 'error payload', content: { application/json: { schema: { $ref: '#/components/schemas/MessageModel' } } } }, DeleteResponce: { description: 'Succesfully deleted', content: { application/json: { schema: { $ref: '#/components/schemas/MessageModel' } } } }, ListResponce: { description: 'List payload', content: { application/json: { schema: { $ref: '#/components/schemas/ListModel' } } } } }
    parameters: { ID: { name: id, in: path, description: 'ID of the object that you want to target', required: true, style: simple }, Page: { name: page, in: path, description: 'The page of the  list that you want to use', style: simple }, Limit: { name: limit, in: path, description: 'The total amount of items that you want to include in a list', style: simple }, Start: { name: start, in: path, description: 'The firts item that you want returned, is used to determine the list offset. E.g. if you start at 50 the first 49 items wil not be returned', style: simple } }
paths:
    /api/students: { get: { description: 'Get a filterd list of students objects', summary: 'Get a students list', operationId: getstudents, tags: [Students], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newstudents object', summary: 'Create a students', operationId: poststudents, tags: [Students], requestBody: { description: 'Create students', content: { application/json: { schema: { $ref: '#/components/schemas/Students' } } } }, responses: { 201: { description: 'succesfully created students', content: { application/json: { schema: { $ref: '#/components/schemas/Students' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/students/{id}': { get: { description: 'Get a students', summary: 'Get a students', operationId: getstudentsById, tags: [Students], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a students', summary: 'Put a students', operationId: putstudentsById, tags: [Students], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created students', content: { application/json: { schema: { $ref: '#/components/schemas/Students' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update students', content: { application/json: { schema: { $ref: '#/components/schemas/Students' } } } } }, delete: { description: 'Delete a students', summary: 'Delete a students', operationId: deletestudentsById, tags: [Students], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /api/persons: { get: { description: 'Get a filterd list of persons objects', summary: 'Get a persons list', operationId: getpersons, tags: [Persons], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newpersons object', summary: 'Create a persons', operationId: postpersons, tags: [Persons], requestBody: { description: 'Create persons', content: { application/json: { schema: { $ref: '#/components/schemas/Persons' } } } }, responses: { 201: { description: 'succesfully created persons', content: { application/json: { schema: { $ref: '#/components/schemas/Persons' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/persons/{id}': { get: { description: 'Get a persons', summary: 'Get a persons', operationId: getpersonsById, tags: [Persons], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a persons', summary: 'Put a persons', operationId: putpersonsById, tags: [Persons], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created persons', content: { application/json: { schema: { $ref: '#/components/schemas/Persons' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update persons', content: { application/json: { schema: { $ref: '#/components/schemas/Persons' } } } } }, delete: { description: 'Delete a persons', summary: 'Delete a persons', operationId: deletepersonsById, tags: [Persons], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /api/organizations: { get: { description: 'Get a filterd list of organizations objects', summary: 'Get a organizations list', operationId: getorganizations, tags: [Organizations], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a neworganizations object', summary: 'Create a organizations', operationId: postorganizations, tags: [Organizations], requestBody: { description: 'Create organizations', content: { application/json: { schema: { $ref: '#/components/schemas/Organizations' } } } }, responses: { 201: { description: 'succesfully created organizations', content: { application/json: { schema: { $ref: '#/components/schemas/Organizations' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/organizations/{id}': { get: { description: 'Get a organizations', summary: 'Get a organizations', operationId: getorganizationsById, tags: [Organizations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a organizations', summary: 'Put a organizations', operationId: putorganizationsById, tags: [Organizations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created organizations', content: { application/json: { schema: { $ref: '#/components/schemas/Organizations' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update organizations', content: { application/json: { schema: { $ref: '#/components/schemas/Organizations' } } } } }, delete: { description: 'Delete a organizations', summary: 'Delete a organizations', operationId: deleteorganizationsById, tags: [Organizations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /api/users: { get: { description: 'Get a filterd list of users objects', summary: 'Get a users list', operationId: getusers, tags: [Users], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newusers object', summary: 'Create a users', operationId: postusers, tags: [Users], requestBody: { description: 'Create users', content: { application/json: { schema: { $ref: '#/components/schemas/Users' } } } }, responses: { 201: { description: 'succesfully created users', content: { application/json: { schema: { $ref: '#/components/schemas/Users' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/users/{id}': { get: { description: 'Get a users', summary: 'Get a users', operationId: getusersById, tags: [Users], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a users', summary: 'Put a users', operationId: putusersById, tags: [Users], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created users', content: { application/json: { schema: { $ref: '#/components/schemas/Users' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update users', content: { application/json: { schema: { $ref: '#/components/schemas/Users' } } } } }, delete: { description: 'Delete a users', summary: 'Delete a users', operationId: deleteusersById, tags: [Users], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /api/userGroups: { get: { description: 'Get a filterd list of usergroups objects', summary: 'Get a usergroups list', operationId: getusergroups, tags: [Usergroups], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newusergroups object', summary: 'Create a usergroups', operationId: postusergroups, tags: [Usergroups], requestBody: { description: 'Create usergroups', content: { application/json: { schema: { $ref: '#/components/schemas/Usergroups' } } } }, responses: { 201: { description: 'succesfully created usergroups', content: { application/json: { schema: { $ref: '#/components/schemas/Usergroups' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/userGroups/{id}': { get: { description: 'Get a usergroups', summary: 'Get a usergroups', operationId: getusergroupsById, tags: [Usergroups], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a usergroups', summary: 'Put a usergroups', operationId: putusergroupsById, tags: [Usergroups], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created usergroups', content: { application/json: { schema: { $ref: '#/components/schemas/Usergroups' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update usergroups', content: { application/json: { schema: { $ref: '#/components/schemas/Usergroups' } } } } }, delete: { description: 'Delete a usergroups', summary: 'Delete a usergroups', operationId: deleteusergroupsById, tags: [Usergroups], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /api/employees: { get: { description: 'Get a filterd list of employees objects', summary: 'Get a employees list', operationId: getemployees, tags: [Employees], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newemployees object', summary: 'Create a employees', operationId: postemployees, tags: [Employees], requestBody: { description: 'Create employees', content: { application/json: { schema: { $ref: '#/components/schemas/Employees' } } } }, responses: { 201: { description: 'succesfully created employees', content: { application/json: { schema: { $ref: '#/components/schemas/Employees' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/employees/{id}': { get: { description: 'Get a employees', summary: 'Get a employees', operationId: getemployeesById, tags: [Employees], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a employees', summary: 'Put a employees', operationId: putemployeesById, tags: [Employees], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created employees', content: { application/json: { schema: { $ref: '#/components/schemas/Employees' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update employees', content: { application/json: { schema: { $ref: '#/components/schemas/Employees' } } } } }, delete: { description: 'Delete a employees', summary: 'Delete a employees', operationId: deleteemployeesById, tags: [Employees], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
