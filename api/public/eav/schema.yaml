openapi: 3.0.3
info:
    title: 'Commonground Gateway EAV endpoints'
    description: 'This documentation contains the EAV endpoints on your commonground gateway.'
    termsOfService: 'http://example.com/terms/'
    contact: { name: 'Gateway Support', url: 'http://www.conduction.nl/contact', email: info@conduction.nl }
    license: { name: 'Apache 2.0', url: 'https://www.apache.org/licenses/LICENSE-2.0.html' }
    version: 1.0.1
servers:
    - { url: /api, description: 'Gateway server' }
tags:
    0: { name: Students, description: 'Dit object beschrijft een student en alleen eigenschappen die specifiek bij een student horen. Binnen taalhuizen wordt student ook wel deelnemer genoemd.' }
    1: { name: Organizations, description: 'Dit endpoint behandeld alle functionaliteit rondom organisaties. Binnen TOP hebben organisaties een belangrijke rol, taalhuizen en aanbieders zijn bijvoorbeeld organisaties.' }
    2: { name: Users, description: 'Dit endpoint behandeld alle functionaliteit rondom users of gebruikers.' }
    3: { name: Employees, description: 'Dit object beschrijft een medewerker en alleen eigenschappen die specifiek bij een medewerker horen.' }
    4: { name: User_groups, description: 'Dit endpoint behandeld alle functionaliteit rondom groepen van gebruikers. Zo kan je met deze groepen onderscheid wat een gebruiker wel mag en de andere niet.' }
    5: { name: Reports, description: 'Administratice reports about this environment' }
    paths: { users/login: { post: { description: 'Test user credentials and return a JWT token', summary: Login, operationId: login, tags: Users, requestBody: { description: 'Create a login request', content: { application/json: { schema: { type: object, properties: { username: { type: string, decription: 'The username' }, password: { type: string, decription: 'The password' } } } } } }, responses: { 201: { description: 'Login succefull', content: { application/json: { schema: { type: object, properties: { '@context': { type: string, decription: 'The internal datataype of the object', example: /contexts/User }, '@id': { type: string, decription: 'The url of the obbject', example: 'https://taalhuizen-bisc.commonground.nu/api/v2/uc/loginusers/c53f17ea-89d6-4cd3-8a26-e87ca148688d' }, '@type': { type: string, decription: 'The linked data type of the object', example: User }, id: { type: string, decription: 'The id of this user', example: c53f17ea-89d6-4cd3-8a26-e87ca148688d }, organization: { type: string, decription: 'The organizations that this user belongs to', example: 'https://taalhuizen-bisc.commonground.nu/api/v1/cc/organizations/3a885f21-6884-4128-8182-56aa8dd57a4f' }, username: { type: string, decription: 'The username', example: test@bisc.nl }, locale: { type: string, decription: 'The users langouge', example: nl }, person: { type: string, decription: 'The url of the person object for the user' }, roles: { type: array, decription: 'The users roles' }, userGroups: { type: arry, decription: 'The users sercurity groups' }, jwtToken: { type: string, decription: 'The jwtToken for authorisation', example: eyJhbGciOiJSUzUxMiJ9.eyJ1c2VySWQiOiJjNTNmMTdlYS04OWQ2LTRjZDMtOGEyNi1lODdjYTE0ODY4OGQiLCJyb2xlcyI6WyJ1c2VyIl0sInNlc3Npb24iOiIxNzQ5ZjdhYy0yNGI5LTQxZjAtOTBiYy04MjJmZjEyZjUxY2QiLCJjc3JmVG9rZW4iOiJjYTE4ZmFjOGVjZTU3NzE5NWNjLmtncUQ4TFFpbGVwNFhiblpORDZ1TWV0R0tSUkg3TDJCMFVsYkgwcGJhdGsuMFdETGlQbHQ5OWdTREl1V1kzVHNCcDBmSEZ4M3FkRFg0RE1RVkFNNUJKVG1STEdEM2tmdGpUc196ZyIsImlzcyI6Imh0dHBzOlwvXC90YWFsaHVpemVuLWJpc2MuY29tbW9uZ3JvdW5kLm51XC9hcGlcL3YyXC91YyIsImlhcyI6MTYzMjA5MzA5OSwiZXhwIjoxNjMyNTI1MDk5fQ.S_ikVB5TtGl8mobvNEeQsGF6txf3kgtks6lENlXcwaoykOy3vIwtFv-ppIXJH0hbUHBoyQ7cX2fVS5pXi2h-pTm-IbXtWUVSbcN-3YIE3WbFEGHoWeHV2ZP1gQf3dqUjMwyFlnazFUFm-eK6Ui3MDfs28FFs_xCsRa4lu3hkJ4iYGl-EeKnLOJHuSUXy3KIbdPIeBwy3iTeNAXn8ExYKfLRAioE98ojOlQoV9wiRJahjy7JXMl51xHmq1BxxAW2D1pZStOf5UUk9XCSf4tWkrsc0iNktLyLB1-eGOVTpzYVYQw0CcMUnjJU3ZfXKO7-Z77kXSZK6AjKv3bcp18C_VUsb0_LHCLi0f_I4fikL-iSkJ8Hu7iLfSXTGe50pNbHC_2DHywWYcFy8sqMpTwn_Auwr-UzFBNwkPF6UiyzFYN8kN_60riw2uTxN18xF8dLG8xZ5WCkMm3SVmYAO4BgmWNrHvxC0P1kz9UVIYKxjzMy77zEyaeAxOaEa6o4u3K1aOFskFUMgJ7wYOfChnKTvrotQoy44HcOttIfqEZC-yfsFPPcCJ7SOc7IIcKTmmZynQcL_8oYPXtL0W7C7uCYOGjB5L-MqTlr9XbJXaSEPcDmRZO0EkOOGP3X6AUwDS_vo1On2ELbJvW5NRLpj51f8eeA9ezSBnvdueIVs11MqYrs }, csrfToken: { type: string, decription: 'The csef token', example: ca18fac8ece577195cc.kgqD8LQilep4XbnZND6uMetGKRRH7L2B0UlbH0pbatk.0WDLiPlt99gSDIuWY3TsBp0fHFx3qdDX4DMQVAM5BJTmRLGD3kftjTs_zg }, '@self': { type: string, decription: 'The login event', example: 'https://taalhuizen-bisc.commonground.nu/api/v2/uc/loginusers/c53f17ea-89d6-4cd3-8a26-e87ca148688d' }, name: { type: string, decription: 'The user id', example: c53f17ea-89d6-4cd3-8a26-e87ca148688d } } } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } } }
components:
    schemas: { MessageModel: { type: object, properties: { message: { type: string, format: string, decription: 'The message' }, type: { type: string, format: string, decription: 'the type of error', default: error }, data: { type: array, format: string, decription: 'the data concerning this message' } } }, ListModel: { type: object, properties: { results: { type: array, decription: 'The results of your query' }, total: { type: integer, decription: 'The total amount of items that match your current query' }, pages: { type: integer, decription: 'the amount of pages in the dataset based on your current limit' }, page: { type: integer, decription: 'the curent page of your dataset' }, limit: { type: integer, decription: 'the desired items per resultset or page', default: 25 }, start: { type: integer, decription: 'thsetarting position (or offset) of your dataset', default: 1 } } }, Telephone: { type: object, required: [telephone], properties: { name: { type: string, title: name, description: null, maxLength: 255 }, telephone: { type: string, title: telephone, description: null, maxLength: 255, required: true } } }, Address: { type: object, required: {  }, properties: { postalCode: { type: string, title: postalCode, description: null, maxLength: 255 }, houseNumber: { type: string, title: houseNumber, description: null, maxLength: 255 }, name: { type: string, title: name, description: null, maxLength: 255 }, houseNumberSuffix: { type: string, title: houseNumberSuffix, description: null, maxLength: 255 }, locality: { type: string, title: locality, description: null, maxLength: 255 }, country: { type: string, title: country, description: null, maxLength: 255 }, street: { type: string, title: street, description: null, maxLength: 255 } } }, Students: { type: object, required: [languageHouse, person], properties: { educations: { $ref: '#/components/schemas/Education' }, languageHouse: { type: string, title: languageHouse, description: 'The uuid of the [organizations]() object that you want to link, you can unlink objects by setting this field to null', format: uuid, required: true }, person: { $ref: '#/components/schemas/Persons', required: true }, intake: { $ref: '#/components/schemas/Student_intake' }, civicIntegration: { $ref: '#/components/schemas/Civic_integration' }, learningNeeds: { $ref: '#/components/schemas/Learningneed' }, participations: { $ref: '#/components/schemas/Participation' } } }, Organizations: { type: object, required: [type], properties: { type: { type: string, title: type, description: 'To be able to differentiat between organizations we need to know what kind of organization they are. The type attribute descirbes what kind of organization this is.', required: true, enum: [taalhuis, bisc, verwijzer, aanbieder] }, telephones: { $ref: '#/components/schemas/Telephone' }, emails: { $ref: '#/components/schemas/Email' }, addresses: { $ref: '#/components/schemas/Address' }, name: { type: string, title: name, description: 'What is the name of the organization.', maxLength: 255, mustBeUnique: true } } }, Student_intake: { type: object, required: [didSignPermissionForm, hasPermissionToSendInformationAboutLibraries, hasPermissionToShareDataWithProviders, hasPermissionToShareDataWithLibraries], properties: { foundVia: { type: string, title: foundVia, description: '(this property is required if the referringOrganizationOther property equals OTHER )', enum: [VOLUNTEER_CENTER, LIBRARY_WEBSITE, SOCIAL_MEDIA, NEWSPAPER, VIA_VIA, OTHER] }, status: { type: string, title: status, description: null, enum: [REFERRED, ACTIVE, COMPLETED], defaultValue: REFERRED }, date: { type: datetime, title: date, description: null }, knowsLatinAlphabet: { type: boolean, title: knowsLatinAlphabet, description: null }, whyWantTheseskills: { type: string, title: whyWantTheseskills, description: null, maxLength: 255 }, desiredSkills: { type: string, title: desiredSkills, description: null, enum: [KLIKTIK, USING_WHATSAPP, USING_SKYPE, DEVICE_FUNCTIONALITIES, DIGITAL_GOVERNMENT, RESERVE_BOOKS_IN_LIBRARY, ADS_ON_MARKTPLAATS, READ_FOR_CHILDREN, UNDERSTAND_PRESCRIPTIONS, WRITE_APPLICATION_LETTER, WRITE_POSTCARD_FOR_FAMILY, DO_ADMINISTRATION, CALCULATIONS_FOR_RECIPES, OTHER] }, dutchNTLevel: { type: string, title: dutchNTLevel, description: null, enum: [NT1, NT2] }, languageInDailyLife: { type: string, title: languageInDailyLife, description: null, maxLength: 255 }, hasTriedThisBeforeExplanation: { type: string, title: hasTriedThisBeforeExplanation, description: null, maxLength: 255 }, speakingLevel: { type: string, title: speakingLevel, description: null, enum: [BEGINNER, REASONABLE, ADVANCED] }, hasTriedThisBefore: { type: boolean, title: hasTriedThisBefore, description: null }, desiredLearningMethod: { type: string, title: desiredLearningMethod, description: null, enum: [IN_A_GROUP, ONE_ON_ONE, HOME_ENVIRONMENT, IN_LIBRARY_OR_OTHER, ONLINE] }, didSignPermissionForm: { type: boolean, title: didSignPermissionForm, description: null, required: true }, participationLadder: { type: string, title: participationLadder, description: null, enum: ['1 ge√Øsoleerd', '2 sociale contacten buiten huis', '3 deelname georganiseerde activiteiten', '4 vrijwilligers werk/maatschappelijke activering', '5 betaald werk met ondersteuning', '6 betaald werk'] }, inNetherlandsSinceYear: { type: integer, title: inNetherlandsSinceYear, description: null }, writingTestResult: { type: string, title: writingTestResult, description: null, enum: [CAN_NOT_WRITE, WRITE_NAW_DETAILS, WRITE_SIMPLE_TEXTS, WRITE_SIMPLE_LETTERS] }, dayTimeActivitiesOther: { type: string, title: dayTimeActivitiesOther, description: '(this property is required if the dayTimeActivities property equals OTHER )', maxLength: 255 }, desiredSkillsOther: { type: string, title: desiredSkillsOther, description: '(this property is required if the desiredSkills property equals OTHER )', maxLength: 255 }, hasPermissionToSendInformationAboutLibraries: { type: boolean, title: hasPermissionToSendInformationAboutLibraries, description: null, required: true }, wentToLanguageHouseBefore: { type: boolean, title: wentToLanguageHouseBefore, description: null }, referringOrganizationEmail: { type: string, title: referringOrganizationEmail, description: null, maxLength: 255 }, readingTestResult: { type: string, title: readingTestResult, description: null, enum: [CAN_NOT_READ, A0, A1, A2, B1, B2, C1, C2] }, wentToLanguageHouseBeforeReason: { type: string, title: wentToLanguageHouseBeforeReason, description: '(this property is required if the wentToLanguageHouseBefore property equals 1 )', maxLength: 255 }, foundViaOther: { type: string, title: foundViaOther, description: '(this property is required if the foundVia property equals OTHER )', maxLength: 255 }, remarks: { type: string, title: remarks, description: null, maxLength: 255 }, referringOrganizationOther: { type: string, title: referringOrganizationOther, description: '(this property is required if the referringOrganization property equals OTHER )', maxLength: 255 }, dayTimeActivities: { type: string, title: dayTimeActivities, description: null, enum: [SEARCHING_FOR_JOB, RE_INTEGRATION, SCHOOL, VOLUNTEER_JOB, JOB, OTHER] }, whyWantThisNow: { type: string, title: whyWantThisNow, description: null, maxLength: 255 }, hasPermissionToShareDataWithProviders: { type: boolean, title: hasPermissionToShareDataWithProviders, description: null, required: true }, lastKnownLevel: { type: string, title: lastKnownLevel, description: null, enum: [A0, A1, A2, B1, B2, C1, C2, UNKNOWN] }, network: { type: string, title: network, description: null, enum: [HOUSEHOLD_MEMBERS, NEIGHBORS, FAMILY_MEMBERS, AID_WORKERS, FRIENDS_ACQUAINTANCES, PEOPLE_AT_MOSQUE_CHURCH, ACQUAINTANCES_SPEAKING_OWN_LANGUAGE, ACQUAINTANCES_SPEAKING_DUTCH] }, trainedForJob: { type: string, title: trainedForJob, description: null, maxLength: 255 }, hasPermissionToShareDataWithLibraries: { type: boolean, title: hasPermissionToShareDataWithLibraries, description: null, required: true }, wentToLanguageHouseBeforeYear: { type: integer, title: wentToLanguageHouseBeforeYear, description: null, maxLength: 255 }, lastJob: { type: string, title: lastJob, description: null, maxLength: 255 }, referringOrganization: { type: string, title: referringOrganization, description: null, enum: [UWV, SOCIAL_SERVICE, LIBRARY, WELFARE_WORK, NEIGHBORHOOD_TEAM, VOLUNTEER_ORGANIZATION, LANGUAGE_PROVIDER, OTHER] } } }, Persons: { type: object, required: [givenName], properties: { addresses: { $ref: '#/components/schemas/Address' }, birthday: { type: date, title: birthday, description: null }, children: { type: integer, title: children, description: null }, birthplace: { type: string, title: birthplace, description: 'The uuid of the [address]() object that you want to link, you can unlink objects by setting this field to null', format: uuid }, telephones: { $ref: '#/components/schemas/Telephone' }, familyName: { type: string, title: familyName, description: null, maxLength: 255 }, givenName: { type: string, title: givenName, description: null, maxLength: 255, required: true }, user: { $ref: '#/components/schemas/Users' }, additionalName: { type: string, title: additionalName, description: null, maxLength: 255 }, contactPreference: { type: string, title: contactPreference, description: null, enum: [PHONECALL, WHATSAPP, EMAIL, OTHER] }, availability: { type: string, title: availability, description: null, enum: [MONDAY_MORNING, MONDAY_AFTERNOON, MONDAY_EVENING, TUESDAY_MORNING, TUESDAY_AFTERNOON, TUESDAY_EVENING, WEDNESDAY_MORNING, WEDNESDAY_AFTERNOON, WEDNESDAY_EVENING, THURSDAY_MORNING, THURSDAY_AFTERNOON, THURSDAY_EVENING, FRIDAY_MORNING, FRIDAY_AFTERNOON, FRIDAY_EVENING, SATURDAY_MORNING, SATURDAY_AFTERNOON, SATURDAY_EVENING, SUNDAY_MORNING, SUNDAY_AFTERNOON, SUNDAY_EVENING] }, country: { type: string, title: country, description: null, maxLength: 255 }, primaryLanguage: { type: string, title: primaryLanguage, description: null, maxLength: 255 }, maritalStatus: { type: string, title: maritalStatus, description: null, enum: [MARRIED_PARTNER, SINGLE, DIVORCED, WIDOW] }, emails: { $ref: '#/components/schemas/Email' }, contactPreferenceOther: { type: string, title: contactPreferenceOther, description: '(this property is required if the contactPreference property equals OTHER )' }, speakingLanguages: { type: string, title: speakingLanguages, description: null, maxLength: 255 }, gender: { type: string, title: gender, description: null, enum: [MALE, FEMALE, X] }, availabilityNotes: { type: string, title: availabilityNotes, description: null, maxLength: 255 } } }, Learningneed: { type: object, required: {  }, properties: { learningResult: { $ref: '#/components/schemas/Learningresult' } } }, Users: { type: object, required: [password, locale, organization, username], properties: { password: { type: string, title: password, description: 'Keep this peronal', maxLength: 255, required: true, mustBeUnique: true }, locale: { type: string, title: locale, description: 'Location setting for the user.', maxLength: 255, required: true, defaultValue: nl-NL }, organization: { type: string, title: organization, description: 'To which organization does the user belong?The uuid of the [organizations]() object that you want to link, you can unlink objects by setting this field to null', format: uuid, required: true }, username: { type: string, title: username, description: 'Usualy an email address.', maxLength: 255, required: true, mustBeUnique: true } } }, Employees: { type: object, required: [person], properties: { educations: { $ref: '#/components/schemas/Education' }, languageHouse: { type: string, title: languageHouse, description: 'The uuid of the [organizations]() object that you want to link, you can unlink objects by setting this field to null', format: uuid }, intake: { $ref: '#/components/schemas/Employee_intake' }, person: { $ref: '#/components/schemas/Persons', required: true } } }, Civic_integration: { type: object, required: {  }, properties: { requirement: { type: string, title: requirement, description: null, enum: ['YES', 'NO', CURRENTLY_WORKING_ON_INTEGRATION] }, finishDate: { type: datetime, title: finishDate, description: '(this property is required if the requirement property equals CURRENTLY_WORKING_ON_INTEGRATION )' }, reason: { type: string, title: reason, description: '(this property is required if the requirement property equals NO )', enum: [FINISHED, FROM_EU_COUNTRY, EXEMPTED_OR_ZROUTE] } } }, User_groups: { type: object, required: [name, description, organization], properties: { name: { type: string, title: name, description: 'What is the name of this usergroup?', maxLength: 255, required: true }, description: { type: string, title: description, description: 'What is the function of this usergroup? To which parts of the application does it give access?', maxLength: 2550, required: true }, organization: { type: string, title: organization, description: 'To which organization does this usergroup belong?The uuid of the [organizations]() object that you want to link, you can unlink objects by setting this field to null', format: uuid, required: true } } }, Course: { type: object, required: {  }, properties: { name: { type: string, title: name, description: null, maxLength: 255 }, description: { type: string, title: description, description: null, maxLength: 255 }, organization: { type: string, title: organization, description: 'The uuid of the [organizations]() object that you want to link, you can unlink objects by setting this field to null', format: uuid } } }, Email: { type: object, required: [email], properties: { name: { type: string, title: name, description: null, maxLength: 255 }, email: { type: string, title: email, description: null, maxLength: 255, required: true } } }, Participation: { type: object, required: {  }, properties: { course: { type: string, title: course, description: 'The uuid of the [course]() object that you want to link, you can unlink objects by setting this field to null', format: uuid } } }, Program: { type: object, required: {  }, properties: {  } }, Learningresult: { type: object, required: {  }, properties: {  } }, Education: { type: object, required: [level, degree, name, type], properties: { startDate: { type: datetime, title: startDate, description: '(this property is required if the doesCurrentlyFollowCourse property equals YES )' }, level: { type: string, title: level, description: '(this property is required if the doesCurrentlyFollowCourse property equals YES )', required: true, enum: [HBO, WO, PROFFESIONAL_EDUCATION, LANGUAGE_COURSE, OTHER] }, degree: { type: boolean, title: degree, description: 'Whether tis eduction or course grants a degree or diploma', required: true }, teacher_type: { type: string, title: teacher_type, description: '(this property is required if the type property equals COURSE )', enum: [PROFESSIONAL, VOLUNTEER, BOTH] }, hours: { type: integer, title: hours, description: 'The total amount of hours this education or course takes(this property is required if the doesCurrentlyFollowCourse property equals YES )' }, endDate: { type: datetime, title: endDate, description: '(this property is required if the doesCurrentlyFollowCourse property equals YES )' }, institution: { type: string, title: institution, description: '(this property is required if the doesCurrentlyFollowCourse property equals YES )', maxLength: 255 }, degreeGranted: { type: boolean, title: degreeGranted, description: 'Whether or not a degree or diploma has been granted from this eduction or course to the student' }, description: { type: string, title: description, description: null, maxLength: 255 }, course_type: { type: string, title: course_type, description: '(this property is required if the type property equals COURSE )', enum: [PROFESSIONAL, VOLUNTEER, BOTH] }, name: { type: string, title: name, description: null, maxLength: 255, required: true }, doesCurrentlyFollowCourse: { type: string, title: doesCurrentlyFollowCourse, description: null, enum: ['YES', 'NO', NO_UNTIL_DATE] }, type: { type: string, title: type, description: null, required: true, enum: [EDUCATION, COURSE] }, group: { type: string, title: group, description: '(this property is required if the doesCurrentlyFollowCourse property equals YES )', enum: [INDIVIDUALLY, GROUP] } } }, Employee_intake: { type: object, required: {  }, properties: { currentEducation: { type: string, title: currentEducation, description: null, enum: ['YES', 'NO', NO_BUT_DID_EARLIER] }, gotHereVia: { type: string, title: gotHereVia, description: null, maxLength: 255 }, isVOGChecked: { type: boolean, title: isVOGChecked, description: null }, volunteeringPreference: { type: string, title: volunteeringPreference, description: null, maxLength: 255 }, experienceWithTargetGroupYesReason: { type: string, title: experienceWithTargetGroupYesReason, description: '(this property is required if the hasExperienceWithTargetGroup property equals 1 )' }, hasExperienceWithTargetGroup: { type: boolean, title: hasExperienceWithTargetGroup, description: null }, targetGroupPreferences: { type: string, title: targetGroupPreferences, description: null, enum: [NT1, NT2] }, otherRelevantCertificates: { type: string, title: otherRelevantCertificates, description: null, maxLength: 255 } } }, Coursegroup: { type: object, required: {  }, properties: {  } } }
    responces: { ErrorResponce: { description: 'error payload', content: { application/json: { schema: { $ref: '#/components/schemas/MessageModel' } } } }, DeleteResponce: { description: 'Succesfully deleted', content: { application/json: { schema: { $ref: '#/components/schemas/MessageModel' } } } }, ListResponce: { description: 'List payload', content: { application/json: { schema: { $ref: '#/components/schemas/ListModel' } } } } }
    parameters: { ID: { name: id, in: path, description: 'ID of the object that you want to target', required: true, style: simple }, Page: { name: page, in: path, description: 'The page of the  list that you want to use', style: simple }, Limit: { name: limit, in: path, description: 'The total amount of items that you want to include in a list', style: simple }, Start: { name: start, in: path, description: 'The firts item that you want returned, is used to determine the list offset. E.g. if you start at 50 the first 49 items wil not be returned', style: simple } }
paths:
    /api/students: { get: { description: 'Get a filterd list of students objects', summary: 'Get a students list', operationId: getstudents, tags: [Students], parameters: {  }, responses: { 200: { description: 'List payload', content: { application/json: { schema: { type: object, properties: { results: { type: array, decription: 'The results of your query', items: { $ref: '#/components/schemas/Students' } }, total: { type: integer, decription: 'The total amount of items that match your current query' }, pages: { type: integer, decription: 'the amount of pages in the dataset based on your current limit' }, page: { type: integer, decription: 'the curent page of your dataset' }, limit: { type: integer, decription: 'the desired items per resultset or page', default: 25 }, start: { type: integer, decription: 'thsetarting position (or offset) of your dataset', default: 1 } } } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newstudents object', summary: 'Create a students', operationId: poststudents, tags: [Students], requestBody: { description: 'Create students', content: { application/json: { schema: { $ref: '#/components/schemas/Students' } } } }, responses: { 201: { description: 'succesfully created students', content: { application/json: { schema: { $ref: '#/components/schemas/Students' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/students/{id}': { get: { description: 'Get a students', summary: 'Get a students', operationId: getstudentsById, tags: [Students], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a students', summary: 'Put a students', operationId: putstudentsById, tags: [Students], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created students', content: { application/json: { schema: { $ref: '#/components/schemas/Students' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update students', content: { application/json: { schema: { $ref: '#/components/schemas/Students' } } } } }, delete: { description: 'Delete a students', summary: 'Delete a students', operationId: deletestudentsById, tags: [Students], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /api/organizations: { get: { description: 'Get a filterd list of organizations objects', summary: 'Get a organizations list', operationId: getorganizations, tags: [Organizations], parameters: {  }, responses: { 200: { description: 'List payload', content: { application/json: { schema: { type: object, properties: { results: { type: array, decription: 'The results of your query', items: { $ref: '#/components/schemas/Organizations' } }, total: { type: integer, decription: 'The total amount of items that match your current query' }, pages: { type: integer, decription: 'the amount of pages in the dataset based on your current limit' }, page: { type: integer, decription: 'the curent page of your dataset' }, limit: { type: integer, decription: 'the desired items per resultset or page', default: 25 }, start: { type: integer, decription: 'thsetarting position (or offset) of your dataset', default: 1 } } } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a neworganizations object', summary: 'Create a organizations', operationId: postorganizations, tags: [Organizations], requestBody: { description: 'Create organizations', content: { application/json: { schema: { $ref: '#/components/schemas/Organizations' } } } }, responses: { 201: { description: 'succesfully created organizations', content: { application/json: { schema: { $ref: '#/components/schemas/Organizations' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/organizations/{id}': { get: { description: 'Get a organizations', summary: 'Get a organizations', operationId: getorganizationsById, tags: [Organizations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a organizations', summary: 'Put a organizations', operationId: putorganizationsById, tags: [Organizations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created organizations', content: { application/json: { schema: { $ref: '#/components/schemas/Organizations' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update organizations', content: { application/json: { schema: { $ref: '#/components/schemas/Organizations' } } } } }, delete: { description: 'Delete a organizations', summary: 'Delete a organizations', operationId: deleteorganizationsById, tags: [Organizations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /api/users: { get: { description: 'Get a filterd list of users objects', summary: 'Get a users list', operationId: getusers, tags: [Users], parameters: {  }, responses: { 200: { description: 'List payload', content: { application/json: { schema: { type: object, properties: { results: { type: array, decription: 'The results of your query', items: { $ref: '#/components/schemas/Users' } }, total: { type: integer, decription: 'The total amount of items that match your current query' }, pages: { type: integer, decription: 'the amount of pages in the dataset based on your current limit' }, page: { type: integer, decription: 'the curent page of your dataset' }, limit: { type: integer, decription: 'the desired items per resultset or page', default: 25 }, start: { type: integer, decription: 'thsetarting position (or offset) of your dataset', default: 1 } } } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newusers object', summary: 'Create a users', operationId: postusers, tags: [Users], requestBody: { description: 'Create users', content: { application/json: { schema: { $ref: '#/components/schemas/Users' } } } }, responses: { 201: { description: 'succesfully created users', content: { application/json: { schema: { $ref: '#/components/schemas/Users' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/users/{id}': { get: { description: 'Get a users', summary: 'Get a users', operationId: getusersById, tags: [Users], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a users', summary: 'Put a users', operationId: putusersById, tags: [Users], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created users', content: { application/json: { schema: { $ref: '#/components/schemas/Users' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update users', content: { application/json: { schema: { $ref: '#/components/schemas/Users' } } } } }, delete: { description: 'Delete a users', summary: 'Delete a users', operationId: deleteusersById, tags: [Users], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /api/employees: { get: { description: 'Get a filterd list of employees objects', summary: 'Get a employees list', operationId: getemployees, tags: [Employees], parameters: {  }, responses: { 200: { description: 'List payload', content: { application/json: { schema: { type: object, properties: { results: { type: array, decription: 'The results of your query', items: { $ref: '#/components/schemas/Employees' } }, total: { type: integer, decription: 'The total amount of items that match your current query' }, pages: { type: integer, decription: 'the amount of pages in the dataset based on your current limit' }, page: { type: integer, decription: 'the curent page of your dataset' }, limit: { type: integer, decription: 'the desired items per resultset or page', default: 25 }, start: { type: integer, decription: 'thsetarting position (or offset) of your dataset', default: 1 } } } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newemployees object', summary: 'Create a employees', operationId: postemployees, tags: [Employees], requestBody: { description: 'Create employees', content: { application/json: { schema: { $ref: '#/components/schemas/Employees' } } } }, responses: { 201: { description: 'succesfully created employees', content: { application/json: { schema: { $ref: '#/components/schemas/Employees' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/employees/{id}': { get: { description: 'Get a employees', summary: 'Get a employees', operationId: getemployeesById, tags: [Employees], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a employees', summary: 'Put a employees', operationId: putemployeesById, tags: [Employees], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created employees', content: { application/json: { schema: { $ref: '#/components/schemas/Employees' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update employees', content: { application/json: { schema: { $ref: '#/components/schemas/Employees' } } } } }, delete: { description: 'Delete a employees', summary: 'Delete a employees', operationId: deleteemployeesById, tags: [Employees], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /api/user_groups: { get: { description: 'Get a filterd list of user_groups objects', summary: 'Get a user_groups list', operationId: getuser_groups, tags: [User_groups], parameters: {  }, responses: { 200: { description: 'List payload', content: { application/json: { schema: { type: object, properties: { results: { type: array, decription: 'The results of your query', items: { $ref: '#/components/schemas/User_groups' } }, total: { type: integer, decription: 'The total amount of items that match your current query' }, pages: { type: integer, decription: 'the amount of pages in the dataset based on your current limit' }, page: { type: integer, decription: 'the curent page of your dataset' }, limit: { type: integer, decription: 'the desired items per resultset or page', default: 25 }, start: { type: integer, decription: 'thsetarting position (or offset) of your dataset', default: 1 } } } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newuser_groups object', summary: 'Create a user_groups', operationId: postuser_groups, tags: [User_groups], requestBody: { description: 'Create user_groups', content: { application/json: { schema: { $ref: '#/components/schemas/User_groups' } } } }, responses: { 201: { description: 'succesfully created user_groups', content: { application/json: { schema: { $ref: '#/components/schemas/User_groups' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/api/user_groups/{id}': { get: { description: 'Get a user_groups', summary: 'Get a user_groups', operationId: getuser_groupsById, tags: [User_groups], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a user_groups', summary: 'Put a user_groups', operationId: putuser_groupsById, tags: [User_groups], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created user_groups', content: { application/json: { schema: { $ref: '#/components/schemas/User_groups' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } }, requestBody: { description: 'Update user_groups', content: { application/json: { schema: { $ref: '#/components/schemas/User_groups' } } } } }, delete: { description: 'Delete a user_groups', summary: 'Delete a user_groups', operationId: deleteuser_groupsById, tags: [User_groups], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
