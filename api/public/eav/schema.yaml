openapi: 3.0.3
info:
    title: 'Commonground Gateway EAV endpoints'
    description: 'This documentation contains the EAV endpoints on your commonground gateway.'
    termsOfService: 'http://example.com/terms/'
    contact: { name: 'Gateway Support', url: 'http://www.conduction.nl/contact', email: info@conduction.nl }
    license: { name: 'Apache 2.0', url: 'https://www.apache.org/licenses/LICENSE-2.0.html' }
    version: 1.0.1
servers:
    - { url: /api/eav/data, description: 'Gateway server' }
tags:
    - { name: Permissiondetails, description: 'the permissions that this person has given' }
    - { name: Educationdetails, description: 'the education details of this person' }
    - { name: Test_results, description: apikey }
    - { name: Participations, description: apikey }
    - { name: Learning_needs, description: apikey }
    - { name: Users, description: apikey }
    - { name: Jobdetails, description: 'the job details of this person' }
    - { name: Motivationdetails, description: 'the motivation details of this person' }
    - { name: Civicintegrationdetails, description: 'the civic integration details of this person' }
    - { name: Memo, description: apikey }
    - { name: Persons, description: apikey }
    - { name: Coursedetails, description: 'the course details of this person' }
    - { name: Dutchntdetails, description: 'the dutch NT details of this person' }
    - { name: Availabilitydetails, description: 'the availability details of this person' }
    - { name: Generaldetails, description: 'the general details of this person' }
    - { name: Referrerdetails, description: 'the referrer details of this person' }
    - { name: Student_dosier_events, description: apikey }
    - { name: Education, description: apikey }
    - { name: Employees, description: apikey }
    - { name: Organizations, description: apikey }
    - { name: Availability, description: 'the availability of this employee (7 days of the week, each with a morning, afternoon and evening)' }
    - { name: Backgrounddetails, description: 'the background details of this person' }
    - { name: Students, description: apikey }
    - { name: Documents, description: apikey }
components:
    schemas: { MessageModel: { type: object, properties: { message: { type: string, format: string, decription: 'The message' }, type: { type: string, format: string, decription: 'the type of error', default: error }, data: { type: array, format: string, decription: 'the data concerning this message' } } }, ListModel: { type: object, properties: { result: { type: array, decription: 'The results of your query' }, total: { type: integer, decription: 'The total amount of items that match your current query' }, pages: { type: integer, decription: 'the amount of pages in the dataset based on your current limit' }, page: { type: integer, decription: 'the curent page of your dataset' }, limit: { type: integer, decription: 'the desired items per resultset or page', default: 25 }, start: { type: integer, decription: 'thsetarting position (or offset) of your dataset', default: 1 } } }, Permissiondetails: { type: object, required: [hasPermissionToShareDataWithProviders, hasPermissionToShareDataWithLibraries, hasPermissionToSendInformationAboutLibraries, didSignPermissionForm], properties: { hasPermissionToShareDataWithProviders: { type: boolean, title: hasPermissionToShareDataWithProviders, description: null, required: true }, hasPermissionToShareDataWithLibraries: { type: boolean, title: hasPermissionToShareDataWithLibraries, description: null, required: true }, hasPermissionToSendInformationAboutLibraries: { type: boolean, title: hasPermissionToSendInformationAboutLibraries, description: null, required: true }, didSignPermissionForm: { type: boolean, title: didSignPermissionForm, description: null, required: true } } }, Educationdetails: { type: object, required: {  }, properties: { followingEducationRightNow: { type: string, title: followingEducationRightNow, description: null, enum: ['YES', 'NO', NO_BUT_DID_EARLIER] } } }, Test_results: { type: object, required: {  }, properties: {  } }, Participations: { type: object, required: {  }, properties: {  } }, Learning_needs: { type: object, required: {  }, properties: {  } }, Users: { type: object, required: [person], properties: { person: { $ref: '#/components/schemas/Persons' } } }, Jobdetails: { type: object, required: {  }, properties: { lastJob: { type: string, title: lastJob, description: null, maxLength: 255 }, dayTimeActivities: { type: string, title: dayTimeActivities, description: null, enum: [SEARCHING_FOR_JOB, RE_INTEGRATION, SCHOOL, VOLUNTEER_JOB, JOB, OTHER] }, dayTimeActivitiesOther: { type: string, title: dayTimeActivitiesOther, description: null, maxLength: 255 }, trainedForJob: { type: string, title: trainedForJob, description: null, maxLength: 255 } } }, Motivationdetails: { type: object, required: {  }, properties: { desiredSkillsOther: { type: string, title: desiredSkillsOther, description: null, maxLength: 255 }, hasTriedThisBeforeExplanation: { type: string, title: hasTriedThisBeforeExplanation, description: null, maxLength: 255 }, remarks: { type: string, title: remarks, description: null, maxLength: 255 }, desiredLearningMethod: { type: string, title: desiredLearningMethod, description: null, enum: [IN_A_GROUP, ONE_ON_ONE, HOME_ENVIRONMENT, IN_LIBRARY_OR_OTHER, ONLINE] }, whyWantTheseskills: { type: string, title: whyWantTheseskills, description: null, maxLength: 255 }, hasTriedThisBefore: { type: boolean, title: hasTriedThisBefore, description: null }, desiredSkills: { type: string, title: desiredSkills, description: null, enum: [KLIKTIK, USING_WHATSAPP, USING_SKYPE, DEVICE_FUNCTIONALITIES, DIGITAL_GOVERNMENT, RESERVE_BOOKS_IN_LIBRARY, ADS_ON_MARKTPLAATS, READ_FOR_CHILDREN, UNDERSTAND_PRESCRIPTIONS, WRITE_APPLICATION_LETTER, WRITE_POSTCARD_FOR_FAMILY, DO_ADMINISTRATION, CALCULATIONS_FOR_RECIPES, OTHER] }, whyWantThisNow: { type: string, title: whyWantThisNow, description: null, maxLength: 255 } } }, Civicintegrationdetails: { type: object, required: {  }, properties: { civicIntegrationRequirement: { type: string, title: civicIntegrationRequirement, description: null, enum: ['YES', 'NO', CURRENTLY_WORKING_ON_INTEGRATION] }, civicIntegrationRequirementFinishDate: { type: string, title: civicIntegrationRequirementFinishDate, description: null }, civicIntegrationRequirementReason: { type: string, title: civicIntegrationRequirementReason, description: null, enum: [FINISHED, FROM_EU_COUNTRY, EXEMPTED_OR_ZROUTE] } } }, Memo: { type: object, required: {  }, properties: {  } }, Persons: { type: object, required: {  }, properties: { contactPreferenceOther: { type: string, title: contactPreferenceOther, description: null }, contactPreference: { type: string, title: contactPreference, description: null, enum: [PHONECALL, WHATSAPP, EMAIL, OTHER] } } }, Coursedetails: { type: object, required: {  }, properties: { isFollowingCourseRightNow: { type: boolean, title: isFollowingCourseRightNow, description: null } } }, Dutchntdetails: { type: object, required: {  }, properties: { languageInDailyLife: { type: string, title: languageInDailyLife, description: null, maxLength: 255 }, inNetherlandsSinceYear: { type: integer, title: inNetherlandsSinceYear, description: null }, lastKnownLevel: { type: string, title: lastKnownLevel, description: null, enum: [A0, A1, A2, B1, B2, C1, C2, UNKNOWN] }, dutchNTLevel: { type: string, title: dutchNTLevel, description: null, enum: [NT1, NT2] }, knowsLatinAlphabet: { type: boolean, title: knowsLatinAlphabet, description: null } } }, Availabilitydetails: { type: object, required: {  }, properties: { availability: { type: string, title: availability, description: null, enum: [MONDAY_MORNING, MONDAY_AFTERNOON, MONDAY_EVENING, TUESDAY_MORNING, TUESDAY_AFTERNOON, TUESDAY_EVENING, WEDNESDAY_MORNING, WEDNESDAY_AFTERNOON, WEDNESDAY_EVENING, THURSDAY_MORNING, THURSDAY_AFTERNOON, THURSDAY_EVENING, FRIDAY_MORNING, FRIDAY_AFTERNOON, FRIDAY_EVENING, SATURDAY_MORNING, SATURDAY_AFTERNOON, SATURDAY_EVENING, SUNDAY_MORNING, SUNDAY_AFTERNOON, SUNDAY_EVENING] }, availabilityNotes: { type: string, title: availabilityNotes, description: null, maxLength: 255 } } }, Generaldetails: { type: object, required: {  }, properties: { childrenCount: { type: integer, title: childrenCount, description: null, maxLength: 255 }, otherLanguages: { type: string, title: otherLanguages, description: null, maxLength: 255 }, countryOfOrigin: { type: string, title: countryOfOrigin, description: null, maxLength: 255 }, familyComposition: { type: string, title: familyComposition, description: null, enum: [MARRIED_PARTNER, SINGLE, DIVORCED, WIDOW] }, nativeLanguage: { type: string, title: nativeLanguage, description: null, maxLength: 255 } } }, Referrerdetails: { type: object, required: {  }, properties: { referringOrganization: { type: string, title: referringOrganization, description: null, enum: [UWV, SOCIAL_SERVICE, LIBRARY, WELFARE_WORK, NEIGHBORHOOD_TEAM, VOLUNTEER_ORGANIZATION, LANGUAGE_PROVIDER, OTHER] }, referringOrganizationOther: { type: string, title: referringOrganizationOther, description: null, maxLength: 255 }, childrenDatesOfBirth: { type: string, title: childrenDatesOfBirth, description: null, maxLength: 255 }, email: { type: string, title: email, description: null, maxLength: 255 } } }, Student_dosier_events: { type: object, required: {  }, properties: {  } }, Education: { type: object, required: {  }, properties: { providesCertificate: { type: boolean, title: providesCertificate, description: null }, groupFormation: { type: string, title: groupFormation, description: null, enum: [INDIVIDUALLY, GROUP] }, amountOfHours: { type: integer, title: amountOfHours, description: null }, courseProfessionalism: { type: string, title: courseProfessionalism, description: null, enum: [PROFESSIONAL, VOLUNTEER, BOTH] }, course: { type: object, title: course, description: null }, education: { type: object, title: education, description: null }, teacherProfessionalism: { type: string, title: teacherProfessionalism, description: null, enum: [PROFESSIONAL, VOLUNTEER, BOTH] } } }, Employees: { type: object, required: [person], properties: { organizationId: { type: string, title: organizationId, description: null, maxLength: 255 }, targetGroupPreferences: { type: string, title: targetGroupPreferences, description: null, enum: [NT1, NT2] }, availabilityNotes: { type: string, title: availabilityNotes, description: null, maxLength: 2550 }, doesCurrentlyFollowCourse: { type: boolean, title: doesCurrentlyFollowCourse, description: null }, otherRelevantCertificates: { type: string, title: otherRelevantCertificates, description: null, maxLength: 255 }, availability: { $ref: '#/components/schemas/Availability' }, currentEducation: { type: string, title: currentEducation, description: null, enum: ['YES', 'NO', NO_BUT_DID_EARLIER] }, userGroupIds: { type: string, title: userGroupIds, description: null }, userId: { type: string, title: userId, description: null }, person: { $ref: '#/components/schemas/Persons' }, experienceWithTargetGroupYesReason: { type: string, title: experienceWithTargetGroupYesReason, description: null }, gotHereVia: { type: string, title: gotHereVia, description: null, maxLength: 255 }, volunteeringPreference: { type: string, title: volunteeringPreference, description: null, maxLength: 255 }, hasExperienceWithTargetGroup: { type: boolean, title: hasExperienceWithTargetGroup, description: null } } }, Organizations: { type: object, required: {  }, properties: {  } }, Availability: { type: object, required: {  }, properties: {  } }, Backgrounddetails: { type: object, required: {  }, properties: { wentToLanguageHouseBeforeReason: { type: string, title: wentToLanguageHouseBeforeReason, description: null, maxLength: 255 }, wentToLanguageHouseBefore: { type: boolean, title: wentToLanguageHouseBefore, description: null }, foundViaOther: { type: string, title: foundViaOther, description: null, maxLength: 255 }, network: { type: string, title: network, description: null, enum: [HOUSEHOLD_MEMBERS, NEIGHBORS, FAMILY_MEMBERS, AID_WORKERS, FRIENDS_ACQUAINTANCES, PEOPLE_AT_MOSQUE_CHURCH, ACQUAINTANCES_SPEAKING_OWN_LANGUAGE, ACQUAINTANCES_SPEAKING_DUTCH] }, wentToLanguageHouseBeforeYear: { type: integer, title: wentToLanguageHouseBeforeYear, description: null, maxLength: 255 }, foundVia: { type: string, title: foundVia, description: null, enum: [VOLUNTEER_CENTER, LIBRARY_WEBSITE, SOCIAL_MEDIA, NEWSPAPER, VIA_VIA, OTHER] }, participationLadder: { type: string, title: participationLadder, description: null, enum: ['1 geïsoleerd', '2 sociale contacten buiten huis', '3 deelname georganiseerde activiteiten', '4 vrijwilligers werk/maatschappelijke activering', '5 betaald werk met ondersteuning', '6 betaald werk'] } } }, Students: { type: object, required: [status, languageHouseId], properties: { availabilityDetails: { $ref: '#/components/schemas/Availabilitydetails' }, dutchNTDetails: { $ref: '#/components/schemas/Dutchntdetails' }, courseDetails: { $ref: '#/components/schemas/Coursedetails' }, generalDetails: { $ref: '#/components/schemas/Generaldetails' }, person: { $ref: '#/components/schemas/Persons' }, civicIntegrationDetails: { $ref: '#/components/schemas/Civicintegrationdetails' }, status: { type: string, title: status, description: null, required: true, enum: [REFERRRED, ACTIVE, COMPLETED], defaultValue: REFERRRED }, backgroundDetails: { $ref: '#/components/schemas/Backgrounddetails' }, educationDetails: { $ref: '#/components/schemas/Educationdetails' }, speakingLevel: { type: string, title: speakingLevel, description: null, enum: [BEGINNER, REASONABLE, ADVANCED] }, referrerDetails: { $ref: '#/components/schemas/Referrerdetails' }, motivationDetails: { $ref: '#/components/schemas/Motivationdetails' }, writingTestResult: { type: string, title: writingTestResult, description: null, enum: [CAN_NOT_WRITE, WRITE_NAW_DETAILS, WRITE_SIMPLE_TEXTS, WRITE_SIMPLE_LETTERS] }, registrar: { $ref: '#/components/schemas/Persons' }, languageHouseId: { type: string, title: languageHouseId, description: null, required: true }, readingTestResult: { type: string, title: readingTestResult, description: null, enum: [CAN_NOT_READ, A0, A1, A2, B1, B2, C1, C2] }, jobDetails: { $ref: '#/components/schemas/Jobdetails' }, permissionDetails: { $ref: '#/components/schemas/Permissiondetails' } } }, Documents: { type: object, required: {  }, properties: {  } } }
    responces: { ErrorResponce: { description: 'error payload', content: { application/json: { schema: { $ref: '#/components/schemas/MessageModel' } } } }, DeleteResponce: { description: 'Succesfully deleted', content: { application/json: { schema: { $ref: '#/components/schemas/MessageModel' } } } }, ListResponce: { description: 'List payload', content: { application/json: { schema: { $ref: '#/components/schemas/ListModel' } } } } }
    parameters: { ID: { name: id, in: path, description: 'ID of the object that you want to target', required: true, style: simple }, Page: { name: page, in: path, description: 'The page of the  list that you want to use', style: simple }, Limit: { name: limit, in: path, description: 'The total amount of items that you want to include in a list', style: simple }, Start: { name: start, in: path, description: 'The firts item that you want returned, is used to determine the list offset. E.g. if you start at 50 the first 49 items wil not be returned', style: simple } }
paths:
    /permissiondetails: { get: { description: 'Get a filterd list of permissiondetails objects', summary: 'Get a permissiondetailslist', operationId: getpermissiondetails, tags: [Permissiondetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newpermissiondetails object', summary: 'Create a permissiondetails', operationId: postpermissiondetails, tags: [Permissiondetails], responses: { 202: { description: 'succesfully created permissiondetails', content: { application/json: { schema: { $ref: '#/components/schemas/Permissiondetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/permissiondetails/{id}': { get: { description: 'Get a permissiondetails', summary: 'Get a permissiondetails', operationId: getpermissiondetailsById, tags: [Permissiondetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a permissiondetails', summary: 'Put a permissiondetails', operationId: putpermissiondetailsById, tags: [Permissiondetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created permissiondetails', content: { application/json: { schema: { $ref: '#/components/schemas/Permissiondetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a permissiondetails', summary: 'Delete a permissiondetails', operationId: deletepermissiondetailsById, tags: [Permissiondetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /educationdetails: { get: { description: 'Get a filterd list of educationdetails objects', summary: 'Get a educationdetailslist', operationId: geteducationdetails, tags: [Educationdetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a neweducationdetails object', summary: 'Create a educationdetails', operationId: posteducationdetails, tags: [Educationdetails], responses: { 202: { description: 'succesfully created educationdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Educationdetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/educationdetails/{id}': { get: { description: 'Get a educationdetails', summary: 'Get a educationdetails', operationId: geteducationdetailsById, tags: [Educationdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a educationdetails', summary: 'Put a educationdetails', operationId: puteducationdetailsById, tags: [Educationdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created educationdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Educationdetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a educationdetails', summary: 'Delete a educationdetails', operationId: deleteeducationdetailsById, tags: [Educationdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /test_results: { get: { description: 'Get a filterd list of test_results objects', summary: 'Get a test_resultslist', operationId: gettest_results, tags: [Test_results], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newtest_results object', summary: 'Create a test_results', operationId: posttest_results, tags: [Test_results], responses: { 202: { description: 'succesfully created test_results', content: { application/json: { schema: { $ref: '#/components/schemas/Test_results' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/test_results/{id}': { get: { description: 'Get a test_results', summary: 'Get a test_results', operationId: gettest_resultsById, tags: [Test_results], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a test_results', summary: 'Put a test_results', operationId: puttest_resultsById, tags: [Test_results], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created test_results', content: { application/json: { schema: { $ref: '#/components/schemas/Test_results' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a test_results', summary: 'Delete a test_results', operationId: deletetest_resultsById, tags: [Test_results], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /participations: { get: { description: 'Get a filterd list of participations objects', summary: 'Get a participationslist', operationId: getparticipations, tags: [Participations], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newparticipations object', summary: 'Create a participations', operationId: postparticipations, tags: [Participations], responses: { 202: { description: 'succesfully created participations', content: { application/json: { schema: { $ref: '#/components/schemas/Participations' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/participations/{id}': { get: { description: 'Get a participations', summary: 'Get a participations', operationId: getparticipationsById, tags: [Participations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a participations', summary: 'Put a participations', operationId: putparticipationsById, tags: [Participations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created participations', content: { application/json: { schema: { $ref: '#/components/schemas/Participations' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a participations', summary: 'Delete a participations', operationId: deleteparticipationsById, tags: [Participations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /learning_needs: { get: { description: 'Get a filterd list of learning_needs objects', summary: 'Get a learning_needslist', operationId: getlearning_needs, tags: [Learning_needs], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newlearning_needs object', summary: 'Create a learning_needs', operationId: postlearning_needs, tags: [Learning_needs], responses: { 202: { description: 'succesfully created learning_needs', content: { application/json: { schema: { $ref: '#/components/schemas/Learning_needs' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/learning_needs/{id}': { get: { description: 'Get a learning_needs', summary: 'Get a learning_needs', operationId: getlearning_needsById, tags: [Learning_needs], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a learning_needs', summary: 'Put a learning_needs', operationId: putlearning_needsById, tags: [Learning_needs], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created learning_needs', content: { application/json: { schema: { $ref: '#/components/schemas/Learning_needs' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a learning_needs', summary: 'Delete a learning_needs', operationId: deletelearning_needsById, tags: [Learning_needs], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /users: { get: { description: 'Get a filterd list of users objects', summary: 'Get a userslist', operationId: getusers, tags: [Users], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newusers object', summary: 'Create a users', operationId: postusers, tags: [Users], responses: { 202: { description: 'succesfully created users', content: { application/json: { schema: { $ref: '#/components/schemas/Users' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/users/{id}': { get: { description: 'Get a users', summary: 'Get a users', operationId: getusersById, tags: [Users], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a users', summary: 'Put a users', operationId: putusersById, tags: [Users], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created users', content: { application/json: { schema: { $ref: '#/components/schemas/Users' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a users', summary: 'Delete a users', operationId: deleteusersById, tags: [Users], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /jobdetails: { get: { description: 'Get a filterd list of jobdetails objects', summary: 'Get a jobdetailslist', operationId: getjobdetails, tags: [Jobdetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newjobdetails object', summary: 'Create a jobdetails', operationId: postjobdetails, tags: [Jobdetails], responses: { 202: { description: 'succesfully created jobdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Jobdetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/jobdetails/{id}': { get: { description: 'Get a jobdetails', summary: 'Get a jobdetails', operationId: getjobdetailsById, tags: [Jobdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a jobdetails', summary: 'Put a jobdetails', operationId: putjobdetailsById, tags: [Jobdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created jobdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Jobdetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a jobdetails', summary: 'Delete a jobdetails', operationId: deletejobdetailsById, tags: [Jobdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /motivationdetails: { get: { description: 'Get a filterd list of motivationdetails objects', summary: 'Get a motivationdetailslist', operationId: getmotivationdetails, tags: [Motivationdetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newmotivationdetails object', summary: 'Create a motivationdetails', operationId: postmotivationdetails, tags: [Motivationdetails], responses: { 202: { description: 'succesfully created motivationdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Motivationdetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/motivationdetails/{id}': { get: { description: 'Get a motivationdetails', summary: 'Get a motivationdetails', operationId: getmotivationdetailsById, tags: [Motivationdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a motivationdetails', summary: 'Put a motivationdetails', operationId: putmotivationdetailsById, tags: [Motivationdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created motivationdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Motivationdetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a motivationdetails', summary: 'Delete a motivationdetails', operationId: deletemotivationdetailsById, tags: [Motivationdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /civicintegrationdetails: { get: { description: 'Get a filterd list of civicintegrationdetails objects', summary: 'Get a civicintegrationdetailslist', operationId: getcivicintegrationdetails, tags: [Civicintegrationdetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newcivicintegrationdetails object', summary: 'Create a civicintegrationdetails', operationId: postcivicintegrationdetails, tags: [Civicintegrationdetails], responses: { 202: { description: 'succesfully created civicintegrationdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Civicintegrationdetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/civicintegrationdetails/{id}': { get: { description: 'Get a civicintegrationdetails', summary: 'Get a civicintegrationdetails', operationId: getcivicintegrationdetailsById, tags: [Civicintegrationdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a civicintegrationdetails', summary: 'Put a civicintegrationdetails', operationId: putcivicintegrationdetailsById, tags: [Civicintegrationdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created civicintegrationdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Civicintegrationdetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a civicintegrationdetails', summary: 'Delete a civicintegrationdetails', operationId: deletecivicintegrationdetailsById, tags: [Civicintegrationdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /memo: { get: { description: 'Get a filterd list of memo objects', summary: 'Get a memolist', operationId: getmemo, tags: [Memo], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newmemo object', summary: 'Create a memo', operationId: postmemo, tags: [Memo], responses: { 202: { description: 'succesfully created memo', content: { application/json: { schema: { $ref: '#/components/schemas/Memo' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/memo/{id}': { get: { description: 'Get a memo', summary: 'Get a memo', operationId: getmemoById, tags: [Memo], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a memo', summary: 'Put a memo', operationId: putmemoById, tags: [Memo], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created memo', content: { application/json: { schema: { $ref: '#/components/schemas/Memo' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a memo', summary: 'Delete a memo', operationId: deletememoById, tags: [Memo], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /persons: { get: { description: 'Get a filterd list of persons objects', summary: 'Get a personslist', operationId: getpersons, tags: [Persons], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newpersons object', summary: 'Create a persons', operationId: postpersons, tags: [Persons], responses: { 202: { description: 'succesfully created persons', content: { application/json: { schema: { $ref: '#/components/schemas/Persons' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/persons/{id}': { get: { description: 'Get a persons', summary: 'Get a persons', operationId: getpersonsById, tags: [Persons], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a persons', summary: 'Put a persons', operationId: putpersonsById, tags: [Persons], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created persons', content: { application/json: { schema: { $ref: '#/components/schemas/Persons' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a persons', summary: 'Delete a persons', operationId: deletepersonsById, tags: [Persons], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /coursedetails: { get: { description: 'Get a filterd list of coursedetails objects', summary: 'Get a coursedetailslist', operationId: getcoursedetails, tags: [Coursedetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newcoursedetails object', summary: 'Create a coursedetails', operationId: postcoursedetails, tags: [Coursedetails], responses: { 202: { description: 'succesfully created coursedetails', content: { application/json: { schema: { $ref: '#/components/schemas/Coursedetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/coursedetails/{id}': { get: { description: 'Get a coursedetails', summary: 'Get a coursedetails', operationId: getcoursedetailsById, tags: [Coursedetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a coursedetails', summary: 'Put a coursedetails', operationId: putcoursedetailsById, tags: [Coursedetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created coursedetails', content: { application/json: { schema: { $ref: '#/components/schemas/Coursedetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a coursedetails', summary: 'Delete a coursedetails', operationId: deletecoursedetailsById, tags: [Coursedetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /dutchntdetails: { get: { description: 'Get a filterd list of dutchntdetails objects', summary: 'Get a dutchntdetailslist', operationId: getdutchntdetails, tags: [Dutchntdetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newdutchntdetails object', summary: 'Create a dutchntdetails', operationId: postdutchntdetails, tags: [Dutchntdetails], responses: { 202: { description: 'succesfully created dutchntdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Dutchntdetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/dutchntdetails/{id}': { get: { description: 'Get a dutchntdetails', summary: 'Get a dutchntdetails', operationId: getdutchntdetailsById, tags: [Dutchntdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a dutchntdetails', summary: 'Put a dutchntdetails', operationId: putdutchntdetailsById, tags: [Dutchntdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created dutchntdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Dutchntdetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a dutchntdetails', summary: 'Delete a dutchntdetails', operationId: deletedutchntdetailsById, tags: [Dutchntdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /availabilitydetails: { get: { description: 'Get a filterd list of availabilitydetails objects', summary: 'Get a availabilitydetailslist', operationId: getavailabilitydetails, tags: [Availabilitydetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newavailabilitydetails object', summary: 'Create a availabilitydetails', operationId: postavailabilitydetails, tags: [Availabilitydetails], responses: { 202: { description: 'succesfully created availabilitydetails', content: { application/json: { schema: { $ref: '#/components/schemas/Availabilitydetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/availabilitydetails/{id}': { get: { description: 'Get a availabilitydetails', summary: 'Get a availabilitydetails', operationId: getavailabilitydetailsById, tags: [Availabilitydetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a availabilitydetails', summary: 'Put a availabilitydetails', operationId: putavailabilitydetailsById, tags: [Availabilitydetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created availabilitydetails', content: { application/json: { schema: { $ref: '#/components/schemas/Availabilitydetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a availabilitydetails', summary: 'Delete a availabilitydetails', operationId: deleteavailabilitydetailsById, tags: [Availabilitydetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /generaldetails: { get: { description: 'Get a filterd list of generaldetails objects', summary: 'Get a generaldetailslist', operationId: getgeneraldetails, tags: [Generaldetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newgeneraldetails object', summary: 'Create a generaldetails', operationId: postgeneraldetails, tags: [Generaldetails], responses: { 202: { description: 'succesfully created generaldetails', content: { application/json: { schema: { $ref: '#/components/schemas/Generaldetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/generaldetails/{id}': { get: { description: 'Get a generaldetails', summary: 'Get a generaldetails', operationId: getgeneraldetailsById, tags: [Generaldetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a generaldetails', summary: 'Put a generaldetails', operationId: putgeneraldetailsById, tags: [Generaldetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created generaldetails', content: { application/json: { schema: { $ref: '#/components/schemas/Generaldetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a generaldetails', summary: 'Delete a generaldetails', operationId: deletegeneraldetailsById, tags: [Generaldetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /referrerdetails: { get: { description: 'Get a filterd list of referrerdetails objects', summary: 'Get a referrerdetailslist', operationId: getreferrerdetails, tags: [Referrerdetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newreferrerdetails object', summary: 'Create a referrerdetails', operationId: postreferrerdetails, tags: [Referrerdetails], responses: { 202: { description: 'succesfully created referrerdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Referrerdetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/referrerdetails/{id}': { get: { description: 'Get a referrerdetails', summary: 'Get a referrerdetails', operationId: getreferrerdetailsById, tags: [Referrerdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a referrerdetails', summary: 'Put a referrerdetails', operationId: putreferrerdetailsById, tags: [Referrerdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created referrerdetails', content: { application/json: { schema: { $ref: '#/components/schemas/Referrerdetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a referrerdetails', summary: 'Delete a referrerdetails', operationId: deletereferrerdetailsById, tags: [Referrerdetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /student_dosier_events: { get: { description: 'Get a filterd list of student_dosier_events objects', summary: 'Get a student_dosier_eventslist', operationId: getstudent_dosier_events, tags: [Student_dosier_events], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newstudent_dosier_events object', summary: 'Create a student_dosier_events', operationId: poststudent_dosier_events, tags: [Student_dosier_events], responses: { 202: { description: 'succesfully created student_dosier_events', content: { application/json: { schema: { $ref: '#/components/schemas/Student_dosier_events' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/student_dosier_events/{id}': { get: { description: 'Get a student_dosier_events', summary: 'Get a student_dosier_events', operationId: getstudent_dosier_eventsById, tags: [Student_dosier_events], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a student_dosier_events', summary: 'Put a student_dosier_events', operationId: putstudent_dosier_eventsById, tags: [Student_dosier_events], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created student_dosier_events', content: { application/json: { schema: { $ref: '#/components/schemas/Student_dosier_events' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a student_dosier_events', summary: 'Delete a student_dosier_events', operationId: deletestudent_dosier_eventsById, tags: [Student_dosier_events], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /education: { get: { description: 'Get a filterd list of education objects', summary: 'Get a educationlist', operationId: geteducation, tags: [Education], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a neweducation object', summary: 'Create a education', operationId: posteducation, tags: [Education], responses: { 202: { description: 'succesfully created education', content: { application/json: { schema: { $ref: '#/components/schemas/Education' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/education/{id}': { get: { description: 'Get a education', summary: 'Get a education', operationId: geteducationById, tags: [Education], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a education', summary: 'Put a education', operationId: puteducationById, tags: [Education], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created education', content: { application/json: { schema: { $ref: '#/components/schemas/Education' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a education', summary: 'Delete a education', operationId: deleteeducationById, tags: [Education], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /employees: { get: { description: 'Get a filterd list of employees objects', summary: 'Get a employeeslist', operationId: getemployees, tags: [Employees], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newemployees object', summary: 'Create a employees', operationId: postemployees, tags: [Employees], responses: { 202: { description: 'succesfully created employees', content: { application/json: { schema: { $ref: '#/components/schemas/Employees' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/employees/{id}': { get: { description: 'Get a employees', summary: 'Get a employees', operationId: getemployeesById, tags: [Employees], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a employees', summary: 'Put a employees', operationId: putemployeesById, tags: [Employees], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created employees', content: { application/json: { schema: { $ref: '#/components/schemas/Employees' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a employees', summary: 'Delete a employees', operationId: deleteemployeesById, tags: [Employees], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /organizations: { get: { description: 'Get a filterd list of organizations objects', summary: 'Get a organizationslist', operationId: getorganizations, tags: [Organizations], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a neworganizations object', summary: 'Create a organizations', operationId: postorganizations, tags: [Organizations], responses: { 202: { description: 'succesfully created organizations', content: { application/json: { schema: { $ref: '#/components/schemas/Organizations' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/organizations/{id}': { get: { description: 'Get a organizations', summary: 'Get a organizations', operationId: getorganizationsById, tags: [Organizations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a organizations', summary: 'Put a organizations', operationId: putorganizationsById, tags: [Organizations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created organizations', content: { application/json: { schema: { $ref: '#/components/schemas/Organizations' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a organizations', summary: 'Delete a organizations', operationId: deleteorganizationsById, tags: [Organizations], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /availability: { get: { description: 'Get a filterd list of availability objects', summary: 'Get a availabilitylist', operationId: getavailability, tags: [Availability], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newavailability object', summary: 'Create a availability', operationId: postavailability, tags: [Availability], responses: { 202: { description: 'succesfully created availability', content: { application/json: { schema: { $ref: '#/components/schemas/Availability' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/availability/{id}': { get: { description: 'Get a availability', summary: 'Get a availability', operationId: getavailabilityById, tags: [Availability], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a availability', summary: 'Put a availability', operationId: putavailabilityById, tags: [Availability], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created availability', content: { application/json: { schema: { $ref: '#/components/schemas/Availability' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a availability', summary: 'Delete a availability', operationId: deleteavailabilityById, tags: [Availability], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /backgrounddetails: { get: { description: 'Get a filterd list of backgrounddetails objects', summary: 'Get a backgrounddetailslist', operationId: getbackgrounddetails, tags: [Backgrounddetails], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newbackgrounddetails object', summary: 'Create a backgrounddetails', operationId: postbackgrounddetails, tags: [Backgrounddetails], responses: { 202: { description: 'succesfully created backgrounddetails', content: { application/json: { schema: { $ref: '#/components/schemas/Backgrounddetails' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/backgrounddetails/{id}': { get: { description: 'Get a backgrounddetails', summary: 'Get a backgrounddetails', operationId: getbackgrounddetailsById, tags: [Backgrounddetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a backgrounddetails', summary: 'Put a backgrounddetails', operationId: putbackgrounddetailsById, tags: [Backgrounddetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created backgrounddetails', content: { application/json: { schema: { $ref: '#/components/schemas/Backgrounddetails' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a backgrounddetails', summary: 'Delete a backgrounddetails', operationId: deletebackgrounddetailsById, tags: [Backgrounddetails], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /students: { get: { description: 'Get a filterd list of students objects', summary: 'Get a studentslist', operationId: getstudents, tags: [Students], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newstudents object', summary: 'Create a students', operationId: poststudents, tags: [Students], responses: { 202: { description: 'succesfully created students', content: { application/json: { schema: { $ref: '#/components/schemas/Students' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/students/{id}': { get: { description: 'Get a students', summary: 'Get a students', operationId: getstudentsById, tags: [Students], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a students', summary: 'Put a students', operationId: putstudentsById, tags: [Students], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created students', content: { application/json: { schema: { $ref: '#/components/schemas/Students' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a students', summary: 'Delete a students', operationId: deletestudentsById, tags: [Students], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
    /documents: { get: { description: 'Get a filterd list of documents objects', summary: 'Get a documentslist', operationId: getdocuments, tags: [Documents], responses: { 200: { $ref: '#/components/responces/ListResponce' }, 404: { $ref: '#/components/responces/ErrorResponce' } } }, post: { description: 'Creates a newdocuments object', summary: 'Create a documents', operationId: postdocuments, tags: [Documents], responses: { 202: { description: 'succesfully created documents', content: { application/json: { schema: { $ref: '#/components/schemas/Documents' } } } }, 404: { $ref: '#/components/responces/ErrorResponce' } } } }
    '/documents/{id}': { get: { description: 'Get a documents', summary: 'Get a documents', operationId: getdocumentsById, tags: [Documents], responses: { 404: { $ref: '#/components/responces/ErrorResponce' } } }, put: { description: 'Put a documents', summary: 'Put a documents', operationId: putdocumentsById, tags: [Documents], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 200: { description: 'succesfully created documents', content: { application/json: { schema: { $ref: '#/components/schemas/Documents' } } } }, 204: { $ref: '#/components/responces/DeleteResponce' } } }, delete: { description: 'Delete a documents', summary: 'Delete a documents', operationId: deletedocumentsById, tags: [Documents], responses: { 404: { $ref: '#/components/responces/ErrorResponce' }, 204: { $ref: '#/components/responces/DeleteResponce' } } } }
